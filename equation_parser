Logic
    1. using shutting-yard equation to turn infix notation into postfix notation
    2. evaluate postfix back to infix notation, derive each term and push to output

Pre-cautions
    1. adding * to variables multiplied by a constant for clearity, eg. 5x to 5*x

Operator presedence
    + - have presedence of 0, * / have presedence of 1, and ^ presedence of 0
    higher presedence means higher priority

Pesduo
    Expression parsing
    empty stack
    empty output
    for i, item in formula
        if item is an operand, then append to output
        if item is an operator, then all opeartor with higher or equal presedence to the current operator is
            popped from the opeartor stack and append to the output. The order of popping = the order in the output.
            the current operator is pushed onto the op stack
        if item is '(', push to stack 
        if item is ')', pop all opeartors in the stack until '(' is found, then discard the (
        if the end of the string is found, pop all opeartor and append to the stack
    
    Expression evluation (reverse postfix)
    for i, item in output
        if item is an operator, apply operation to first two operands
        replace the two operand with the calculated value (in our case, we would keep the original,
        derive the operands and store them in a separate array, then concantenate the two value and the operator into one operand
        )
        continue until no more operators are left
    

